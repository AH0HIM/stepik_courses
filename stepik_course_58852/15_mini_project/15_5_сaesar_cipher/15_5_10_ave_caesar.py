"""
–ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
—Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞). –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º
–æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.

https://stepik.org/lesson/352860/step/4?unit=336821
"""
txt = input()


def encryption():
    lang = [chr(i) for i in range(97, 123)]
    result = ''.strip()
    for i in txt.split():
        count = 0
        for j in i:
            if j.isalpha():
                count += 1
        for k in i:
            if k in lang:
                result += lang[(lang.index(k) + count) % len(lang)]
            elif k.lower() in lang:
                result += lang[(lang.index(k.lower()) + count) % len(lang)].upper()
            else:
                result += k
        result += ' '

    return result


print(encryption())
